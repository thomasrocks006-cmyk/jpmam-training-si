1) Replace your ViewProfile() with this (in public/app.js)
Find your existing function ViewProfile(){...} and replace the whole function with this version.

js
Copy code
function ViewProfile(){
  const root = document.createElement("div");
  root.className = "container";
  root.appendChild(topNav());

  const wrap = document.createElement("div");
  wrap.className = "layout";
  root.appendChild(wrap);

  wrap.appendChild(sidebar());

  const main = document.createElement("div");
  main.className = "main";
  wrap.appendChild(main);

  const card = document.createElement("div");
  card.className = "card";
  card.innerHTML = `
    <div class="p">
      <div class="flex-between">
        <h2>Profile & Settings</h2>
        <small class="muted">Manage your profile, password, and preferences</small>
      </div>

      <!-- Top: Profile + Preferences in a balanced 2-col grid -->
      <div class="profile-grid">
        <!-- Profile block -->
        <section class="panel">
          <div class="panel-title">Profile</div>
          <div class="form-grid">
            <div class="avatar-block">
              <img id="avatar" src="" alt="avatar" class="avatar" />
              <div class="stack-6">
                <label class="label">Profile photo</label>
                <input type="file" id="photo" accept="image/png,image/jpeg"/>
                <button class="btn-ghost" id="uploadPhoto">Upload</button>
              </div>
            </div>

            <div class="stack-12">
              <div class="form-row-2">
                <div class="field">
                  <label class="label">Name</label>
                  <input id="name" class="input" placeholder="Your name"/>
                </div>
                <div class="field">
                  <label class="label">Phone</label>
                  <input id="phone" class="input" placeholder="+61 ..."/>
                </div>
              </div>

              <div class="form-row-2">
                <div class="field">
                  <label class="label">Email</label>
                  <input id="email" class="input" disabled/>
                </div>
                <div class="field">
                  <label class="label">Role</label>
                  <input id="role" class="input" disabled/>
                </div>
              </div>

              <div class="form-actions">
                <button class="btn" id="saveProfile">Save Changes</button>
              </div>
            </div>
          </div>
        </section>

        <!-- Preferences block -->
        <section class="panel">
          <div class="panel-title">Preferences</div>
          <div class="stack-12">
            <div class="form-row-2">
              <div class="field">
                <label class="label">Theme</label>
                <select id="prefTheme" class="input">
                  <option value="auto">Auto</option>
                  <option value="light">Light</option>
                  <option value="dark">Dark</option>
                </select>
              </div>
              <div class="field">
                <label class="label">Email Digest</label>
                <select id="prefDigest" class="input">
                  <option value="none">None</option>
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                </select>
              </div>
            </div>

            <div class="form-row-2">
              <div class="field">
                <label class="label">Timezone</label>
                <select id="prefTz" class="input">
                  <option value="Australia/Melbourne">Australia/Melbourne</option>
                  <option value="Australia/Sydney">Australia/Sydney</option>
                  <option value="UTC">UTC</option>
                  <option value="America/New_York">America/New_York</option>
                  <option value="Europe/London">Europe/London</option>
                </select>
              </div>
              <div class="field">
                <label class="label">Date Format</label>
                <select id="prefDateFmt" class="input">
                  <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                  <option value="YYYY-MM-DD">YYYY-MM-DD</option>
                  <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                </select>
              </div>
            </div>

            <div class="card subtle-card">
              <div class="p">
                <b>Email Alerts</b>
                <div class="sep"></div>
                <label class="check"><input type="checkbox" id="alrApprovals"/> Approvals assigned to me</label>
                <label class="check"><input type="checkbox" id="alrBreaches"/> Mandate breaches</label>
                <label class="check"><input type="checkbox" id="alrRfp"/> RFP stage changes</label>
                <label class="check"><input type="checkbox" id="liveUpdates"/> Live dashboard updates (SSE)</label>
              </div>
            </div>

            <div class="form-actions">
              <button class="btn" id="savePrefs">Save Preferences</button>
            </div>
          </div>
        </section>
      </div>

      <!-- Bottom: Password + Admin shortcuts in a responsive grid -->
      <div class="profile-grid-bottom">
        <section class="panel">
          <div class="panel-title">Change Password</div>
          <div class="stack-12">
            <div class="field">
              <label class="label">Current Password</label>
              <input id="pwCur" type="password" class="input" placeholder="Current password"/>
            </div>
            <div class="form-row-2">
              <div class="field">
                <label class="label">New Password</label>
                <input id="pwNew" type="password" class="input" placeholder="At least 8 chars"/>
              </div>
              <div class="field">
                <label class="label">Confirm New Password</label>
                <input id="pwConf" type="password" class="input" placeholder="Repeat new password"/>
              </div>
            </div>
            <div class="form-actions">
              <button class="btn" id="savePw">Update Password</button>
            </div>
          </div>
        </section>

        <section class="panel" id="adminOnly" style="display:none;">
          <div class="panel-title">Admin Shortcuts</div>
          <div class="stack-12">
            <div class="inline">
              <button class="btn-ghost" id="goAdmin">Open Admin</button>
              <button class="btn-ghost" id="goUsers">User Management</button>
            </div>
            <small class="muted">Visible only to Admins.</small>
          </div>
        </section>

        <section class="panel">
          <div class="panel-title">Profile Completeness</div>
          <div class="stack-12">
            <div class="progress"><span id="profProgress" style="width:0%"></span></div>
            <small class="muted" id="profHint">Fill in your name, phone, and upload a photo to complete your profile.</small>
          </div>
        </section>
      </div>
    </div>
  `;
  main.appendChild(card);

  // ----- logic -----
  let user = null;

  (async function init(){
    try { user = await meGet(); } catch { user = await fetchMe(); }

    // Populate profile
    card.querySelector("#avatar").src = user?.photo || "/avatar-placeholder.png";
    card.querySelector("#name").value = user?.name || "";
    card.querySelector("#phone").value = user?.phone || "";
    card.querySelector("#email").value = user?.email || "";
    card.querySelector("#role").value = user?.role || "";

    // Populate preferences
    const prefs = user?.preferences || {};
    card.querySelector("#prefTheme").value   = prefs.theme || "auto";
    card.querySelector("#prefDigest").value  = prefs.emailDigest || "none";
    card.querySelector("#prefTz").value      = prefs.timezone || "Australia/Melbourne";
    card.querySelector("#prefDateFmt").value = prefs.dateFormat || "DD/MM/YYYY";

    const e = (prefs.emailAlerts || {});
    card.querySelector("#alrApprovals").checked = !!e.approvals;
    card.querySelector("#alrBreaches").checked  = !!e.breaches;
    card.querySelector("#alrRfp").checked       = !!e.rfpStages;
    card.querySelector("#liveUpdates").checked  = (prefs.liveUpdates !== false);

    // Admin visibility
    if ((user?.role || "") === "Admin") {
      card.querySelector("#adminOnly").style.display = "";
      card.querySelector("#goAdmin").onclick = () => { state.view = "admin"; render(); };
      card.querySelector("#goUsers").onclick = () => { state.view = "admin"; render(); };
    }

    // Apply theme immediately
    applyTheme(card.querySelector("#prefTheme").value);

    // Profile completeness
    drawProfileCompleteness();

    // Handlers
    card.querySelector("#saveProfile").onclick = onSaveProfile;
    card.querySelector("#uploadPhoto").onclick = onUploadPhoto;
    card.querySelector("#savePw").onclick      = onSavePassword;
    card.querySelector("#savePrefs").onclick   = onSavePrefs;

    card.querySelector("#prefTheme").onchange  = (e)=> applyTheme(e.target.value);
  })();

  function applyTheme(val){
    const rootEl = document.documentElement;
    if (val === "auto") {
      rootEl.dataset.theme = (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) ? "dark" : "light";
    } else {
      rootEl.dataset.theme = val;
    }
  }

  function drawProfileCompleteness(){
    const name = card.querySelector("#name").value.trim();
    const phone = card.querySelector("#phone").value.trim();
    const hasPhoto = !!(user?.photo);
    let score = 0;
    if (name) score += 34;
    if (phone) score += 33;
    if (hasPhoto) score += 33;
    card.querySelector("#profProgress").style.width = `${score}%`;
    card.querySelector("#profHint").textContent = score === 100 ? "Nice! Your profile is complete." : "Fill in your name, phone, and upload a photo to complete your profile.";
  }

  async function onSaveProfile(){
    const payload = {
      name: card.querySelector("#name").value.trim(),
      phone: card.querySelector("#phone").value.trim(),
    };
    try {
      const res = await meUpdate(payload);
      user = res; CURRENT_USER = res;
      drawProfileCompleteness();
      toast("Profile saved");
    } catch (err) { alert(err.message || "Failed to save profile"); }
  }

  async function onUploadPhoto(){
    const file = card.querySelector("#photo").files?.[0];
    if (!file) return alert("Choose an image first");
    const okTypes = ["image/png","image/jpeg"];
    if (!okTypes.includes(file.type)) return alert("Use PNG or JPEG");
    const dataUrl = await new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
    try {
      const r = await meUploadPhoto(String(dataUrl));
      card.querySelector("#avatar").src = r.photo;
      await meUpdate({ photo: r.photo });
      user = await meGet(); CURRENT_USER = user;
      drawProfileCompleteness();
      toast("Photo updated");
    } catch (err) { alert(err.message || "Upload failed"); }
  }

  async function onSavePassword(){
    const cur = card.querySelector("#pwCur").value;
    const n1  = card.querySelector("#pwNew").value;
    const n2  = card.querySelector("#pwConf").value;
    if (n1 !== n2) return alert("New passwords do not match");
    if ((n1 || "").length < 8) return alert("New password must be at least 8 characters");
    try {
      await meSetPassword(cur, n1);
      card.querySelector("#pwCur").value = "";
      card.querySelector("#pwNew").value = "";
      card.querySelector("#pwConf").value = "";
      toast("Password updated");
    } catch (err) { alert(err.message || "Failed to update password"); }
  }

  async function onSavePrefs(){
    const prefs = {
      theme:       card.querySelector("#prefTheme").value,
      emailDigest: card.querySelector("#prefDigest").value,
      timezone:    card.querySelector("#prefTz").value,
      dateFormat:  card.querySelector("#prefDateFmt").value,
      emailAlerts: {
        approvals: card.querySelector("#alrApprovals").checked,
        breaches:  card.querySelector("#alrBreaches").checked,
        rfpStages: card.querySelector("#alrRfp").checked
      },
      liveUpdates: card.querySelector("#liveUpdates").checked
    };
    try {
      await meSetPrefs(prefs);
      CURRENT_USER = await meGet();
      toast("Preferences saved");
    } catch (err) { alert(err.message || "Failed to save preferences"); }
  }

  return root;
}
2) Add layout & form styles (append to public/style.css)
Append this to the end of your CSS. It fixes overlap, normalizes inputs, and adds responsive behavior.

css
Copy code
/* ===== Profile & Settings layout ===== */
.profile-grid {
  display: grid;
  grid-template-columns: 1.2fr 1fr;
  gap: 16px;
  margin-top: 12px;
}
.profile-grid-bottom {
  display: grid;
  grid-template-columns: 1fr 0.8fr 1fr;
  gap: 16px;
  margin-top: 16px;
}
@media (max-width: 1100px){
  .profile-grid { grid-template-columns: 1fr; }
  .profile-grid-bottom { grid-template-columns: 1fr; }
}

.panel { border: 1px solid var(--line); border-radius: 12px; background: #fff; }
.panel > .panel-title { font-weight: 600; padding: 12px 16px 0 16px; }
.panel .p { padding: 12px 16px 16px 16px; }

.form-grid {
  display: grid;
  grid-template-columns: 130px 1fr;
  gap: 16px;
  align-items: start;
}
.avatar-block { display: grid; gap: 8px; }
.avatar { width: 96px; height: 96px; border-radius: 50%; object-fit: cover; border: 1px solid var(--line); }

.stack-6 { display: grid; gap: 6px; }
.stack-12 { display: grid; gap: 12px; }

.form-row-2 { display: grid; grid-template-columns: 1fr 1fr; gap: 12px; }
@media (max-width: 640px){
  .form-row-2 { grid-template-columns: 1fr; }
  .form-grid { grid-template-columns: 1fr; }
}

.field { display: grid; gap: 6px; }
.label { font-size: 12px; color: #6b7280; }
.input {
  width: 100%; height: 36px; padding: 6px 10px; border: 1px solid var(--line);
  border-radius: 8px; background: #fff; outline: none;
}
.input:focus { border-color: #93c5fd; box-shadow: 0 0 0 3px rgba(147,197,253,.35); }

.check { display: flex; gap: 8px; align-items: center; margin: 6px 0; }
.form-actions { display: flex; gap: 8px; justify-content: flex-end; }

/* Subtle inner card inside Preferences */
.subtle-card { background: #fafafa; }

/* Progress */
.progress { background: #f3f4f6; height: 10px; border-radius: 999px; position: relative; overflow: hidden; }
.progress > span { position: absolute; left: 0; top: 0; bottom: 0; background: #10b981; border-radius: 999px; }

/* Top nav right area (if not already styled) */
.topnav-right { display: flex; align-items: center; gap: 8px; }

/* ===== Theme support (Light/Dark) ===== */
:root {
  --bg: #ffffff;
  --fg: #111827;
  --muted: #6b7280;
  --line: #e5e7eb;
  --card: #ffffff;
}
:root[data-theme="dark"] {
  --bg: #0f172a;
  --fg: #e5e7eb;
  --muted: #9ca3af;
  --line: #1f2937;
  --card: #111827;
}
body { background: var(--bg); color: var(--fg); }
.card { background: var(--card); border-color: var(--line); }
.label,.muted { color: var(--muted); }
.input { background: var(--card); color: var(--fg); border-color: var(--line); }
What changed & why it fixes the overlap
Structured grid (profile-grid, form-grid, form-row-2) ensures labels, inputs, and the avatar area never collide—even on narrow screens.

label + input styling guarantees consistent spacing and full-width inputs.

Responsive breakpoints collapse the two columns gracefully on small widths.

Avatar block is isolated so the file input and button don’t overlap the image.

Theme variables keep contrast readable for both light and dark.

The 3 added improvements (now live)
Theme selector (Light/Dark/Auto) — applied instantly via document.documentElement.dataset.theme, persisted in preferences.

Timezone & Date Format — stored in preferences; you can use these across the app when formatting times/dates.

Email Digest Frequency — saved in preferences for future scheduler use; shows you’re ready for daily/weekly digests.

Bonus: Profile Completeness meter so users know what’s missing.