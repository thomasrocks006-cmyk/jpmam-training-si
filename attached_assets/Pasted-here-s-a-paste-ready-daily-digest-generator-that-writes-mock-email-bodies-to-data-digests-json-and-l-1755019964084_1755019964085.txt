here’s a paste-ready daily digest generator that writes mock email bodies to data/digests.json and lets you preview your latest digest right from the Profile page.

1) Backend — digest builder + routes
1a) Create lib/digests.js
js
Copy code
// lib/digests.js
import { readJson, writeJson } from "./store.js";
import { getBreaches } from "./mandatesStore.js";

const FILE = "digests.json";

function load() {
  try { const x = readJson(FILE); return Array.isArray(x) ? x : []; }
  catch { writeJson(FILE, []); return []; }
}
function save(list){ writeJson(FILE, list); }
function nextId(list){ return "D-" + String(1000 + list.length); }

function h(s){ return String(s).replace(/[&<>]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;'}[c])); }

function section(title, rowsHtml){
  return `
    <tr><td style="font:600 16px system-ui,Arial;margin:0 0 6px;">${h(title)}</td></tr>
    <tr><td style="padding:8px 12px;border:1px solid #e5e7eb;border-radius:8px;background:#fafafa;">
      ${rowsHtml || '<div style="color:#6b7280">No items</div>'}
    </td></tr>
    <tr><td style="height:12px;"></td></tr>
  `;
}

export function buildDigest({ user, rfps = [], approvals = [], breaches = [] }) {
  const dueSoon = rfps.filter(r => r.due)
                      .sort((a,b)=> String(a.due).localeCompare(String(b.due)))
                      .slice(0, 8);
  const pendingApprovals = approvals.filter(a => a.status === "Pending").slice(0, 8);
  const openBreaches = breaches.filter(b => b.status === "Open").slice(0, 8);

  const s1 = dueSoon.map(r =>
    `<div><b>${h(r.id)}</b> — ${h(r.title)} <span style="color:#6b7280">(${h(r.client)})</span> • Due ${h(r.due)}</div>`
  ).join("");

  const s2 = pendingApprovals.map(a =>
    `<div><b>${h(a.id || a.ref || "Approval")}</b> — ${h(a.summary || a.text || "Pending approval")}</div>`
  ).join("");

  const s3 = openBreaches.map(b =>
    `<div><b>${h(b.mandateId)}</b> — ${h(b.type)} • <span style="color:${b.severity==='Critical'?'#b91c1c':'#92400e'}">${h(b.severity)}</span></div>`
  ).join("");

  const bodyHtml = `
    <table width="100%" cellpadding="0" cellspacing="0" style="max-width:680px;margin:0 auto;">
      <tr><td style="font:600 18px system-ui,Arial">Daily Digest</td></tr>
      <tr><td style="color:#6b7280;font:14px system-ui,Arial">Hi ${h(user.name || user.email)}, here’s your snapshot.</td></tr>
      <tr><td style="height:10px;"></td></tr>
      ${section("RFPs due soon (next 14 days)", s1)}
      ${section("Pending approvals", s2)}
      ${section("Open mandate breaches", s3)}
      <tr><td style="color:#9ca3af;font:12px system-ui,Arial">Generated ${(new Date()).toLocaleString()}</td></tr>
    </table>
  `;

  return { subject: "JPMAM Workspace — Daily Digest", bodyHtml };
}

export function writeDigest({ to, subject, bodyHtml, items = {} }) {
  const list = load();
  const id = nextId(list);
  const rec = {
    id,
    to: String(to).toLowerCase(),
    ts: new Date().toISOString(),
    subject, bodyHtml,
    items
  };
  list.unshift(rec);
  save(list);
  return rec;
}

export function listDigests({ to, limit = 20 }) {
  const list = load();
  const e = String(to || "").toLowerCase();
  return list.filter(d => !e || d.to === e).slice(0, limit);
}

export function getDigest(id) {
  return load().find(d => d.id === id) || null;
}
1b) Create routes/digests.js
js
Copy code
// routes/digests.js
import { Router } from "express";
import { requireAuth } from "../lib/auth.js";
import { readJson } from "../lib/store.js";
import { getBreaches } from "../lib/mandatesStore.js";
import { buildDigest, writeDigest, listDigests, getDigest } from "../lib/digests.js";

const router = Router();

// Generate digests for users who opted in (emailDigest !== "none")
// Call manually from UI (no background cron in this mock).
router.post("/run", requireAuth, (req, res) => {
  const mode = String(req.body?.mode || "daily"); // "daily" or "weekly" (no restriction here)
  const users = (() => { try { const u = readJson("users.json"); return Array.isArray(u) ? u : []; } catch { return []; } })();

  // Source data
  const rfps = (() => { try { const x = readJson("rfps.json"); return Array.isArray(x) ? x : []; } catch { return []; } })();
  const approvals = (() => { try { const x = readJson("approvals.json"); return Array.isArray(x) ? x : []; } catch { return []; } })();
  const breaches = getBreaches({ status: "Open" });

  const out = [];
  for (const u of users) {
    const dig = (u.preferences?.emailDigest || "none");
    if (dig === "none") continue;
    if (mode === "daily" && dig !== "daily" && dig !== "weekly") continue;
    // (Optionally, only send weekly on Mondays; omitted for simplicity)

    const { subject, bodyHtml } = buildDigest({ user: u, rfps, approvals, breaches });
    out.push(writeDigest({ to: u.email, subject, bodyHtml, items: { rfpsCount: rfps.length, approvalsCount: approvals.length, breachesCount: breaches.length } }));
  }
  res.json({ ok: true, generated: out.length, digests: out.map(d => d.id) });
});

// List my digests
router.get("/", requireAuth, (req, res) => {
  const limit = Math.max(1, Math.min(100, Number(req.query.limit || 20)));
  const mine = listDigests({ to: req.user?.sub, limit });
  res.json({ digests: mine });
});

// Get one by id (must belong to me)
router.get("/:id", requireAuth, (req, res) => {
  const d = getDigest(req.params.id);
  if (!d || d.to !== String(req.user?.sub).toLowerCase()) return res.status(404).json({ error: "Not found" });
  res.json(d);
});

export default router;
1c) Mount in server.js
js
Copy code
import digestsRoutes from "./routes/digests.js";
app.use("/api/digests", digestsRoutes);
2) Frontend — buttons to generate & preview in Profile
2a) Add API helpers in public/app.js (near other helpers)
js
Copy code
// === Digests API ===
async function digestRun(mode="daily"){
  return await apiFetch("/digests/run", { method:"POST", headers:{"Content-Type":"application/json"}, body: JSON.stringify({ mode }) });
}
async function digestList(limit=5){ return await apiGet(`/digests?limit=${limit}`); }
async function digestGet(id){ return await apiGet(`/digests/${encodeURIComponent(id)}`); }
2b) Enhance the Profile view (two small inserts)
Insert a new “Email Digest” panel (under Preferences or at bottom)
In ViewProfile() (the cleaned version I gave you), inside .profile-grid-bottom, add this panel (place it before “Profile Completeness” or after — your call):

html
Copy code
<section class="panel">
  <div class="panel-title">Email Digest</div>
  <div class="stack-12">
    <div class="inline">
      <button class="btn" id="genDigest">Generate Today’s Digest</button>
      <button class="btn-ghost" id="previewDigest">Preview Latest</button>
    </div>
    <div id="digestPreview" class="digest-preview"></div>
  </div>
</section>
Wire the buttons (add to the init() handlers area inside ViewProfile()):
js
Copy code
// Digest buttons
card.querySelector("#genDigest").onclick = async () => {
  try {
    const r = await digestRun("daily");
    toast(`Generated ${r.generated} digest${r.generated===1?"":"s"}`);
  } catch (e) {
    alert(e.message || "Failed to generate digest");
  }
};

card.querySelector("#previewDigest").onclick = async () => {
  try {
    const list = await digestList(1);
    const latest = list?.digests?.[0];
    if (!latest) {
      card.querySelector("#digestPreview").innerHTML = `<div class="muted">No digest yet. Click “Generate Today’s Digest”.</div>`;
      return;
    }
    const full = await digestGet(latest.id);
    card.querySelector("#digestPreview").innerHTML = `
      <div class="card" style="border:1px solid var(--line);">
        <div class="p">
          <div class="muted small">${new Date(full.ts).toLocaleString()}</div>
          <div style="height:8px;"></div>
          <div class="email" style="background:#fff;border:1px solid #e5e7eb;border-radius:8px;padding:12px;overflow:auto;">
            ${full.bodyHtml}
          </div>
        </div>
      </div>`;
  } catch (e) {
    alert(e.message || "Failed to load digest");
  }
};
3) (Optional) Light CSS for the preview
Append to public/style.css:

css
Copy code
.digest-preview .email table { width: 100%; }
.digest-preview .email b { color: var(--fg); }
