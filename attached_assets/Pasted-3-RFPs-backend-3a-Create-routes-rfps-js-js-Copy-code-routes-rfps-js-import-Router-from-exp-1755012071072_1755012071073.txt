3) RFPs backend
3a) Create routes/rfps.js
js
Copy code
// routes/rfps.js
import { Router } from "express";
import { requireAuth } from "../lib/auth.js";

const router = Router();

// In-memory demo (resets on restart)
let RFPs = [
  {
    id: "RFP-SS-24Q3",
    client: "SunSuper",
    title: "Australian Equity Core â€“ Renew",
    stage: "Draft",           // Draft | Internal Review | Client Review | Submitted | Won | Lost
    owner: "You",
    due: new Date(Date.now() + 4*24*60*60*1000).toISOString().slice(0,10),
    lastUpdated: new Date().toISOString(),
    notes: [
      { ts: new Date().toISOString(), user: "You", text: "Initial outline complete." }
    ],
    checklist: [
      { key: "Team bios updated", done: true },
      { key: "Track record appendix", done: true },
      { key: "Fee schedule review", done: false }
    ],
    attachments: [
      { name: "RFP-Questionnaire.docx", type: "DOCX", size: "312 KB", uploadedAt: new Date().toISOString() }
    ]
  },
  {
    id: "RFP-QBE-ALPHA",
    client: "QBE Insurance",
    title: "Alpha Overlay Proposal",
    stage: "Internal Review",
    owner: "Coverage",
    due: new Date(Date.now() + 10*24*60*60*1000).toISOString().slice(0,10),
    lastUpdated: new Date().toISOString(),
    notes: [],
    checklist: [
      { key: "Risk backtest section", done: false },
      { key: "Compliance statement", done: false }
    ],
    attachments: []
  }
];

// List with simple filters: ?stage=Draft&client=SunSuper
router.get("/", requireAuth, (req, res) => {
  const { stage, client, q } = req.query || {};
  let out = [...RFPs];
  if (stage)  out = out.filter(r => r.stage.toLowerCase() === String(stage).toLowerCase());
  if (client) out = out.filter(r => r.client.toLowerCase().includes(String(client).toLowerCase()));
  if (q)      out = out.filter(r => (r.id + r.title).toLowerCase().includes(String(q).toLowerCase()));
  out.sort((a,b)=> (a.due || "").localeCompare(b.due || ""));
  res.json({ rfps: out, total: out.length });
});

router.get("/:id", requireAuth, (req, res) => {
  const r = RFPs.find(x => x.id === req.params.id);
  if (!r) return res.status(404).json({ error: "RFP not found" });
  res.json(r);
});

router.post("/", requireAuth, (req, res) => {
  const { id, client, title, owner="You", due } = req.body || {};
  if (!id || !client || !title) return res.status(400).json({ error: "Missing id, client, or title" });
  if (RFPs.find(x => x.id === id)) return res.status(409).json({ error: "RFP id exists" });
  const r = { id, client, title, stage: "Draft", owner, due: due || null, lastUpdated: new Date().toISOString(), notes: [], checklist: [], attachments: [] };
  RFPs.unshift(r);
  res.status(201).json(r);
});

router.put("/:id", requireAuth, (req, res) => {
  const idx = RFPs.findIndex(x => x.id === req.params.id);
  if (idx === -1) return res.status(404).json({ error: "RFP not found" });
  RFPs[idx] = { ...RFPs[idx], ...req.body, lastUpdated: new Date().toISOString() };
  res.json(RFPs[idx]);
});

router.post("/:id/notes", requireAuth, (req, res) => {
  const r = RFPs.find(x => x.id === req.params.id);
  if (!r) return res.status(404).json({ error: "RFP not found" });
  const text = String(req.body?.text || "").trim();
  if (!text) return res.status(400).json({ error: "Missing note text" });
  const note = { ts: new Date().toISOString(), user: req.user?.sub || "user", text: text.slice(0, 2000) };
  r.notes.unshift(note);
  r.lastUpdated = new Date().toISOString();
  res.status(201).json(note);
});

router.put("/:id/stage", requireAuth, (req, res) => {
  const r = RFPs.find(x => x.id === req.params.id);
  if (!r) return res.status(404).json({ error: "RFP not found" });
  const stage = String(req.body?.stage || "");
  const allowed = ["Draft","Internal Review","Client Review","Submitted","Won","Lost"];
  if (!allowed.includes(stage)) return res.status(400).json({ error: "Invalid stage" });
  r.stage = stage;
  r.lastUpdated = new Date().toISOString();
  res.json(r);
});

export default router;
3b) Mount RFPs in server.js
Add import:

js
Copy code
import rfpsRoutes from "./routes/rfps.js";
Mount:

js
Copy code
app.use("/api/rfps", rfpsRoutes);
4) RFPs frontend
4a) Add helpers in public/app.js
Place near other API helpers:

js
Copy code
// === RFPs API ===
async function rfpList(params = {}){
  const qs = new URLSearchParams(params).toString();
  return await apiGet(`/rfps${qs ? `?${qs}` : ""}`);
}
async function rfpGet(id){ return await apiGet(`/rfps/${encodeURIComponent(id)}`); }
async function rfpCreate(payload){
  return await apiFetch("/rfps", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(payload) });
}
async function rfpSetStage(id, stage){
  return await apiFetch(`/rfps/${encodeURIComponent(id)}/stage`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ stage }) });
}
async function rfpAddNote(id, text){
  return await apiFetch(`/rfps/${encodeURIComponent(id)}/notes`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ text }) });
}