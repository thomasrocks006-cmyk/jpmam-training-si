 let’s clean this up properly. Below are paste-ready fixes that stop overlapping, standardize spacing, and make the Profile & Settings page look crisp on all screen sizes.

You only need two edits:

Replace your ViewProfile() with the streamlined markup (no inline styles).

Append the CSS block (global form/layout reset + profile-specific styles).

1) public/app.js — replace ViewProfile() entirely
js
Copy code
function ViewProfile() {
  const root = document.createElement("div");
  root.className = "container";
  root.appendChild(topNav());

  const wrap = document.createElement("div");
  wrap.className = "layout";
  root.appendChild(wrap);

  wrap.appendChild(sidebar());

  const main = document.createElement("div");
  main.className = "main";
  wrap.appendChild(main);

  const card = document.createElement("div");
  card.className = "card";
  card.innerHTML = `
    <div class="p">

      <header class="page-head">
        <div>
          <h2 class="page-title">Profile & Settings</h2>
          <p class="page-sub">Manage your profile, password, and preferences</p>
        </div>
      </header>

      <!-- Top grid: Profile + Preferences -->
      <div class="grid grid-2 profile-top">

        <!-- Profile panel -->
        <section class="panel">
          <div class="panel-head"><h3>Profile</h3></div>
          <div class="panel-body">
            <div class="profile-row">
              <div class="avatar-col">
                <img id="avatar" class="avatar" alt="Avatar" src="/avatar-placeholder.png"/>
                <div class="avatar-actions">
                  <label class="label">Profile photo</label>
                  <input type="file" id="photo" accept="image/png,image/jpeg"/>
                  <button class="btn-ghost" id="uploadPhoto">Upload</button>
                </div>
              </div>
              <div class="form-col">
                <div class="form-row">
                  <div class="field">
                    <label class="label" for="name">Name</label>
                    <input id="name" class="input" placeholder="Your name"/>
                  </div>
                  <div class="field">
                    <label class="label" for="phone">Phone</label>
                    <input id="phone" class="input" placeholder="+61 ..."/>
                  </div>
                </div>
                <div class="form-row">
                  <div class="field">
                    <label class="label" for="email">Email</label>
                    <input id="email" class="input" disabled/>
                  </div>
                  <div class="field">
                    <label class="label" for="role">Role</label>
                    <input id="role" class="input" disabled/>
                  </div>
                </div>
                <div class="actions">
                  <button class="btn" id="saveProfile">Save Changes</button>
                </div>
              </div>
            </div>
          </div>
        </section>

        <!-- Preferences panel -->
        <section class="panel">
          <div class="panel-head"><h3>Preferences</h3></div>
          <div class="panel-body">
            <div class="form-row">
              <div class="field">
                <label class="label" for="prefTheme">Theme</label>
                <select id="prefTheme" class="input">
                  <option value="auto">Auto</option>
                  <option value="light">Light</option>
                  <option value="dark">Dark</option>
                </select>
              </div>
              <div class="field">
                <label class="label" for="prefDigest">Email Digest</label>
                <select id="prefDigest" class="input">
                  <option value="none">None</option>
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                </select>
              </div>
            </div>

            <div class="form-row">
              <div class="field">
                <label class="label" for="prefTz">Timezone</label>
                <select id="prefTz" class="input">
                  <option value="Australia/Melbourne">Australia/Melbourne</option>
                  <option value="Australia/Sydney">Australia/Sydney</option>
                  <option value="UTC">UTC</option>
                  <option value="America/New_York">America/New_York</option>
                  <option value="Europe/London">Europe/London</option>
                </select>
              </div>
              <div class="field">
                <label class="label" for="prefDateFmt">Date Format</label>
                <select id="prefDateFmt" class="input">
                  <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                  <option value="YYYY-MM-DD">YYYY-MM-DD</option>
                  <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                </select>
              </div>
            </div>

            <div class="inner-card">
              <b>Email Alerts</b>
              <div class="sp-8"></div>
              <label class="check"><input type="checkbox" id="alrApprovals"/> Approvals assigned to me</label>
              <label class="check"><input type="checkbox" id="alrBreaches"/> Mandate breaches</label>
              <label class="check"><input type="checkbox" id="alrRfp"/> RFP stage changes</label>
              <label class="check"><input type="checkbox" id="liveUpdates"/> Live dashboard updates (SSE)</label>
            </div>

            <div class="actions">
              <button class="btn" id="savePrefs">Save Preferences</button>
            </div>
          </div>
        </section>
      </div>

      <!-- Bottom grid: Password / Digest / Admin / Completeness -->
      <div class="grid grid-3 profile-bottom">

        <section class="panel">
          <div class="panel-head"><h3>Change Password</h3></div>
          <div class="panel-body">
            <div class="field">
              <label class="label" for="pwCur">Current Password</label>
              <input id="pwCur" type="password" class="input" placeholder="Current password"/>
            </div>
            <div class="form-row">
              <div class="field">
                <label class="label" for="pwNew">New Password</label>
                <input id="pwNew" type="password" class="input" placeholder="At least 8 chars"/>
              </div>
              <div class="field">
                <label class="label" for="pwConf">Confirm New Password</label>
                <input id="pwConf" type="password" class="input" placeholder="Repeat new password"/>
              </div>
            </div>
            <div class="actions">
              <button class="btn" id="savePw">Update Password</button>
            </div>
          </div>
        </section>

        <section class="panel">
          <div class="panel-head"><h3>Email Digest</h3></div>
          <div class="panel-body">
            <div class="actions actions-left">
              <button class="btn" id="genDigest">Generate Today’s Digest</button>
              <button class="btn-ghost" id="previewDigest">Preview Latest</button>
            </div>
            <div id="digestPreview" class="digest-preview"></div>
          </div>
        </section>

        <section class="panel" id="adminOnly" style="display:none;">
          <div class="panel-head"><h3>Admin Shortcuts</h3></div>
          <div class="panel-body">
            <div class="actions actions-left">
              <button class="btn-ghost" id="goAdmin">Open Admin</button>
              <button class="btn-ghost" id="goUsers">User Management</button>
            </div>
            <p class="muted small">Visible only to Admins.</p>
          </div>
        </section>

        <section class="panel">
          <div class="panel-head"><h3>Profile Completeness</h3></div>
          <div class="panel-body">
            <div class="progress"><span id="profProgress"></span></div>
            <p class="muted small" id="profHint">Fill in your name, phone, and upload a photo to complete your profile.</p>
          </div>
        </section>
      </div>

    </div>
  `;
  main.appendChild(card);

  // ----- logic (unchanged from our last version, just cleaner hooks) -----
  let user = null;

  (async function init(){
    try { user = await meGet(); } catch { user = await fetchMe(); }

    // Profile fields
    card.querySelector("#avatar").src = user?.photo || "/avatar-placeholder.png";
    card.querySelector("#name").value = user?.name || "";
    card.querySelector("#phone").value = user?.phone || "";
    card.querySelector("#email").value = user?.email || "";
    card.querySelector("#role").value = user?.role || "";

    // Preferences
    const prefs = user?.preferences || {};
    card.querySelector("#prefTheme").value   = prefs.theme || "auto";
    card.querySelector("#prefDigest").value  = prefs.emailDigest || "none";
    card.querySelector("#prefTz").value      = prefs.timezone || "Australia/Melbourne";
    card.querySelector("#prefDateFmt").value = prefs.dateFormat || "DD/MM/YYYY";
    const e = (prefs.emailAlerts || {});
    card.querySelector("#alrApprovals").checked = !!e.approvals;
    card.querySelector("#alrBreaches").checked  = !!e.breaches;
    card.querySelector("#alrRfp").checked       = !!e.rfpStages;
    card.querySelector("#liveUpdates").checked  = (prefs.liveUpdates !== false);

    // Admin show/hide
    if ((user?.role || "") === "Admin") {
      card.querySelector("#adminOnly").style.display = "";
      card.querySelector("#goAdmin").onclick = () => { state.view = "admin"; render(); };
      card.querySelector("#goUsers").onclick = () => { state.view = "admin"; render(); };
    }

    // Apply theme immediately
    applyTheme(card.querySelector("#prefTheme").value);
    card.querySelector("#prefTheme").onchange = (e)=> applyTheme(e.target.value);

    // Wire buttons
    card.querySelector("#saveProfile").onclick = onSaveProfile;
    card.querySelector("#uploadPhoto").onclick = onUploadPhoto;
    card.querySelector("#savePw").onclick      = onSavePassword;
    card.querySelector("#savePrefs").onclick   = onSavePrefs;
    card.querySelector("#genDigest").onclick   = onRunDigest;
    card.querySelector("#previewDigest").onclick = onPreviewDigest;

    drawProfileCompleteness();
  })();

  function applyTheme(val){
    const rootEl = document.documentElement;
    if (val === "auto") {
      rootEl.dataset.theme = (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) ? "dark" : "light";
    } else {
      rootEl.dataset.theme = val;
    }
  }

  function drawProfileCompleteness(){
    const name = card.querySelector("#name").value.trim();
    const phone = card.querySelector("#phone").value.trim();
    const hasPhoto = !!(user?.photo);
    let score = 0; if (name) score += 34; if (phone) score += 33; if (hasPhoto) score += 33;
    card.querySelector("#profProgress").style.width = `${score}%`;
    card.querySelector("#profHint").textContent = score === 100 ? "Nice! Your profile is complete." : "Fill in your name, phone, and upload a photo to complete your profile.";
  }

  async function onSaveProfile(){
    const payload = { name: card.querySelector("#name").value.trim(), phone: card.querySelector("#phone").value.trim() };
    try { const res = await meUpdate(payload); user = res; CURRENT_USER = res; drawProfileCompleteness(); toast("Profile saved"); }
    catch (err){ alert(err.message || "Failed to save profile"); }
  }

  async function onUploadPhoto(){
    const file = card.querySelector("#photo").files?.[0];
    if (!file) return alert("Choose an image first");
    if (!["image/png","image/jpeg"].includes(file.type)) return alert("Use PNG or JPEG");
    const dataUrl = await new Promise((resolve, reject) => { const r = new FileReader(); r.onload=()=>resolve(r.result); r.onerror=reject; r.readAsDataURL(file); });
    try { const r = await meUploadPhoto(String(dataUrl)); card.querySelector("#avatar").src = r.photo; await meUpdate({ photo: r.photo }); user = await meGet(); CURRENT_USER = user; drawProfileCompleteness(); toast("Photo updated"); }
    catch (err){ alert(err.message || "Upload failed"); }
  }

  async function onSavePassword(){
    const cur = card.querySelector("#pwCur").value; const n1 = card.querySelector("#pwNew").value; const n2 = card.querySelector("#pwConf").value;
    if (n1 !== n2) return alert("New passwords do not match");
    if ((n1 || "").length < 8) return alert("New password must be at least 8 characters");
    try { await meSetPassword(cur, n1); ["#pwCur","#pwNew","#pwConf"].forEach(s=>card.querySelector(s).value=""); toast("Password updated"); }
    catch (err){ alert(err.message || "Failed to update password"); }
  }

  async function onSavePrefs(){
    const prefs = {
      theme:       card.querySelector("#prefTheme").value,
      emailDigest: card.querySelector("#prefDigest").value,
      timezone:    card.querySelector("#prefTz").value,
      dateFormat:  card.querySelector("#prefDateFmt").value,
      emailAlerts: {
        approvals: card.querySelector("#alrApprovals").checked,
        breaches:  card.querySelector("#alrBreaches").checked,
        rfpStages: card.querySelector("#alrRfp").checked
      },
      liveUpdates: card.querySelector("#liveUpdates").checked
    };
    try { await meSetPrefs(prefs); CURRENT_USER = await meGet(); toast("Preferences saved"); }
    catch (err){ alert(err.message || "Failed to save preferences"); }
  }

  async function onRunDigest(){
    try { const r = await digestRun("daily"); toast(`Generated ${r.generated} digest${r.generated===1?"":"s"}`); }
    catch (e){ alert(e.message || "Failed to generate digest"); }
  }

  async function onPreviewDigest(){
    try {
      const list = await digestList(1); const latest = list?.digests?.[0];
      const preview = card.querySelector("#digestPreview");
      if (!latest) { preview.innerHTML = `<div class="muted">No digest yet. Click “Generate Today’s Digest”.</div>`; return; }
      const full = await digestGet(latest.id);
      preview.innerHTML = `<div class="email-preview">${full.bodyHtml}</div>`;
    } catch (e) { alert(e.message || "Failed to load digest"); }
  }

  return root;
}
2) public/style.css — append this block
This is a small layout reset plus profile-specific styles. It prevents overlap by enforcing grids/flex, consistent spacing, and full-width inputs.

css
Copy code
/* ========== Global layout normalization (safe) ========== */
* { box-sizing: border-box; }
label, input, select, button { font: inherit; }
input, select { display: block; width: 100%; }
img { max-width: 100%; display: block; }
.sp-8 { height: 8px; }

/* ========== Page header ========== */
.page-head { display:flex; align-items:flex-end; justify-content:space-between; margin-bottom: 8px; }
.page-title { margin:0; font-size:20px; line-height:1.2; }
.page-sub { margin:2px 0 0; color: var(--muted); }

/* ========== Grid helpers ========== */
.grid { display:grid; gap:16px; }
.grid-2 { grid-template-columns: 1.15fr 1fr; }
.grid-3 { grid-template-columns: 1fr 1fr 1fr; }
@media (max-width: 1100px){ .grid-2, .grid-3 { grid-template-columns: 1fr; } }

/* ========== Panels ========== */
.panel { border:1px solid var(--line); border-radius:12px; background: var(--card); }
.panel-head { padding:12px 16px 0; }
.panel-head h3 { margin:0; font-size:16px; }
.panel-body { padding:12px 16px 16px; display:grid; gap:12px; }

.inner-card { border:1px solid var(--line); border-radius:10px; padding:12px; background: rgba(0,0,0,0.02); }

/* ========== Profile rows ========== */
.profile-top { align-items: start; }
.profile-row { display:grid; grid-template-columns: 140px 1fr; gap:16px; }
.avatar-col { display:grid; gap:10px; align-content:start; }
.avatar { width:110px; height:110px; border-radius:50%; object-fit:cover; border:1px solid var(--line); }
.avatar-actions { display:grid; gap:6px; }
.form-col { display:grid; gap:12px; }

/* ========== Forms ========== */
.form-row { display:grid; grid-template-columns: 1fr 1fr; gap:12px; }
@media (max-width: 700px){
  .profile-row { grid-template-columns: 1fr; }
  .form-row { grid-template-columns: 1fr; }
}
.field { display:grid; gap:6px; }
.label { font-size:12px; color: var(--muted); }
.input {
  height: 38px; padding: 8px 10px; border:1px solid var(--line); border-radius:8px;
  background: var(--card); color: var(--fg); outline: none;
}
.input:focus { border-color:#93c5fd; box-shadow: 0 0 0 3px rgba(147,197,253,.35); }

.check { display:flex; align-items:center; gap:8px; margin:6px 0; }

.actions { display:flex; justify-content:flex-end; gap:8px; }
.actions-left { justify-content:flex-start; }

/* ========== Digest preview ========== */
.email-preview { border:1px solid var(--line); border-radius:10px; background:#fff; padding:12px; overflow:auto; }
.email-preview table { width:100%; }

/* ========== Progress ========== */
.progress { height:10px; border-radius:999px; background:#eef2f7; overflow:hidden; }
.progress > span { display:block; height:100%; width:0%; background:#10b981; transition: width .25s ease; }

/* ========== Theme support (kept simple) ========== */
:root {
  --bg:#ffffff; --fg:#111827; --muted:#6b7280; --line:#e5e7eb; --card:#ffffff;
}
:root[data-theme="dark"] {
  --bg:#0f172a; --fg:#e5e7eb; --muted:#9ca3af; --line:#1f2937; --card:#111827;
}
body { background: var(--bg); color: var(--fg); }
.card { background: var(--card); border-color: var(--line); }
.muted { color: var(--muted); }
Why this fixes your layout: