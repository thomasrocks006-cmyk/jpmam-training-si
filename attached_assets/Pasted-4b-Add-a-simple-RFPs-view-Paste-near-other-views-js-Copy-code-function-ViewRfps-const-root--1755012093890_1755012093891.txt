4b) Add a simple RFPs view
Paste near other views:

js
Copy code
function ViewRfps(){
  const root = document.createElement("div");
  root.className = "container";
  root.appendChild(topNav());

  const wrap = document.createElement("div");
  wrap.className = "layout";
  root.appendChild(wrap);

  // Sidebar
  wrap.appendChild(sidebar());

  // Main
  const main = document.createElement("div");
  main.className = "main";
  wrap.appendChild(main);

  const card = document.createElement("div");
  card.className = "card";
  card.innerHTML = `
    <div class="p">
      <div class="flex-between">
        <h2>RFPs</h2>
        <div class="inline">
          <input id="q" placeholder="Search id/title…" style="width: 220px;">
          <select id="stage">
            <option value="">All stages</option>
            ${["Draft","Internal Review","Client Review","Submitted","Won","Lost"].map(s=>`<option>${s}</option>`).join("")}
          </select>
          <button class="btn" id="new">New RFP</button>
        </div>
      </div>
      <div style="height:10px;"></div>
      <table class="table">
        <thead>
          <tr><th style="width:160px;">ID</th><th>Title</th><th style="width:160px;">Client</th><th style="width:150px;">Stage</th><th style="width:120px;">Due</th><th style="width:120px;"></th></tr>
        </thead>
        <tbody id="rows"></tbody>
      </table>
    </div>
  `;
  main.appendChild(card);

  const rows = card.querySelector("#rows");
  const q = card.querySelector("#q");
  const stage = card.querySelector("#stage");

  async function refresh(){
    rows.innerHTML = `<tr><td colspan="6" class="muted">Loading…</td></tr>`;
    try {
      const { rfps=[] } = await rfpList({ q: q.value, stage: stage.value });
      rows.innerHTML = rfps.map(r => `
        <tr>
          <td>${r.id}</td>
          <td>${r.title}</td>
          <td>${r.client}</td>
          <td><span class="pill">${r.stage}</span></td>
          <td>${r.due || "-"}</td>
          <td><button class="btn-ghost" data-id="${r.id}">Open</button></td>
        </tr>
      `).join("") || `<tr><td colspan="6" class="muted">No RFPs</td></tr>`;
    } catch(e){
      rows.innerHTML = `<tr><td colspan="6" style="color:#b91c1c">${e.message}</td></tr>`;
    }
  }

  q.oninput = () => refresh();
  stage.onchange = () => refresh();
  refresh();

  // New RFP (tiny inline dialog)
  card.querySelector("#new").onclick = async () => {
    const id = prompt("RFP ID (e.g., RFP-SS-24Q3):");
    const client = id ? prompt("Client (e.g., SunSuper):") : null;
    const title = client ? prompt("Title:") : null;
    if (!id || !client || !title) return;
    try { await rfpCreate({ id, client, title }); await refresh(); }
    catch(e){ alert(e.message || "Failed to create RFP"); }
  };

  // Open detail
  rows.addEventListener("click", async (e) => {
    const id = e.target?.dataset?.id;
    if (!id) return;
    state.view = "rfp";
    state.rfpId = id;
    render();
  });

  return root;
}
4c) RFP Detail view
Paste near other detail views:

js
Copy code
function ViewRfpDetail(){
  const root = document.createElement("div");
  root.className = "container";
  root.appendChild(topNav());

  const wrap = document.createElement("div");
  wrap.className = "layout";
  root.appendChild(wrap);

  wrap.appendChild(sidebar());

  const main = document.createElement("div");
  main.className = "main";
  wrap.appendChild(main);

  const card = document.createElement("div");
  card.className = "card";
  card.innerHTML = `
    <div class="p">
      <div class="flex-between">
        <h2>RFP: <span id="rid"></span></h2>
        <button class="btn" id="back">← All RFPs</button>
      </div>
      <div class="sep" style="margin:10px 0;"></div>
      <div id="meta" class="grid" style="grid-template-columns: repeat(2, minmax(0,1fr)); gap: 12px;"></div>

      <div class="tabs" id="tabs" style="margin-top:10px;">
        <div class="tab active" data-tab="overview">Overview</div>
        <div class="tab" data-tab="notes">Notes</div>
        <div class="tab" data-tab="checklist">Checklist</div>
        <div class="tab" data-tab="attachments">Attachments</div>
      </div>
      <div id="body" style="margin-top:10px;"></div>
    </div>
  `;
  main.appendChild(card);

  const rid = card.querySelector("#rid");
  const meta = card.querySelector("#meta");
  const body = card.querySelector("#body");
  const tabs = card.querySelector("#tabs");

  card.querySelector("#back").onclick = () => { state.view = "rfps"; render(); };

  async function load(){
    try {
      const r = await rfpGet(state.rfpId);
      rid.textContent = r.id;
      meta.innerHTML = `
        <div class="card"><div class="p"><b>Title</b><div>${r.title}</div></div></div>
        <div class="card"><div class="p"><b>Client</b><div>${r.client}</div></div></div>
        <div class="card"><div class="p"><b>Owner</b><div>${r.owner}</div></div></div>
        <div class="card"><div class="p"><b>Stage</b>
          <div class="inline">
            <select id="stageSel">
              ${["Draft","Internal Review","Client Review","Submitted","Won","Lost"].map(s=>`<option ${s===r.stage?"selected":""}>${s}</option>`).join("")}
            </select>
            <button class="btn" id="saveStage">Save</button>
          </div>
        </div></div>
        <div class="card"><div class="p"><b>Due</b><div>${r.due || "-"}</div></div></div>
        <div class="card"><div class="p"><b>Updated</b><div>${new Date(r.lastUpdated).toLocaleString()}</div></div></div>
      `;

      async function renderTab(name){
        if (name === "overview") {
          body.innerHTML = `
            <div class="muted">Use the controls above to manage stage. Other sections are in the tabs.</div>
          `;
          return;
        }
        if (name === "notes"){
          body.innerHTML = `
            <div class="inline">
              <input id="noteText" placeholder="Add a note..." style="width: 60%;">
              <button class="btn" id="addNote">Add</button>
            </div>
            <div style="height:8px;"></div>
            <div id="notesList"></div>
          `;
          const list = body.querySelector("#notesList");
          list.innerHTML = (r.notes || []).map(n => `
            <div class="card"><div class="p">
              <div class="muted">${new Date(n.ts).toLocaleString()} — ${n.user}</div>
              <div>${n.text}</div>
            </div></div>
          `).join("") || `<div class="muted">No notes.</div>`;
          body.querySelector("#addNote").onclick = async () => {
            const t = body.querySelector("#noteText").value.trim();
            if (!t) return;
            await rfpAddNote(r.id, t);
            state.view = "rfp"; render(); // simple reload
          };
          return;
        }
        if (name === "checklist"){
          body.innerHTML = `
            <table class="table">
              <thead><tr><th>Item</th><th style="width:100px;">Done</th></tr></thead>
              <tbody>${(r.checklist || []).map(c => `
                <tr><td>${c.key}</td><td>${c.done ? "✅" : "—"}</td></tr>`).join("")}
              </tbody>
            </table>
          `;
          return;
        }
        if (name === "attachments"){
          body.innerHTML = `
            <table class="table">
              <thead><tr><th>Name</th><th style="width:90px;">Type</th><th style="width:100px;">Size</th><th style="width:140px;">Uploaded</th></tr></thead>
              <tbody>${(r.attachments || []).map(a => `
                <tr><td>${a.name}</td><td>${a.type}</td><td>${a.size}</td><td>${new Date(a.uploadedAt).toLocaleString()}</td></tr>`).join("")}
              </tbody>
            </table>
          `;
          return;
        }
      }

      // Tab wiring
      tabs.addEventListener("click", (e) => {
        const t = e.target.closest(".tab");
        if (!t) return;
        tabs.querySelectorAll(".tab").forEach(x => x.classList.remove("active"));
        t.classList.add("active");
        renderTab(t.dataset.tab);
      });
      await renderTab("overview");

      // Save stage
      card.querySelector("#saveStage").onclick = async () => {
        const val = card.querySelector("#stageSel").value;
        await rfpSetStage(r.id, val);
        toast("RFP stage updated");
        state.view = "rfp"; render();
      };

    } catch(e){
      main.innerHTML = `<div class="card"><div class="p" style="color:#b91c1c">${e.message}</div></div>`;
    }
  }

  load();
  return root;
}