// routes/auth.js
const express = require("express");
const fs = require("fs");
const fsp = require("fs/promises");
const path = require("path");
const jwt = require("jsonwebtoken");

const router = express.Router();
const DATA = path.join(__dirname, "..", "data", "users.json");

function normalizeSid(s) {
  return String(s || "").trim().toLowerCase();
}
async function loadUsers() {
  try {
    const raw = await fsp.readFile(DATA, "utf8");
    return JSON.parse(raw);
  } catch {
    return [];
  }
}
function maskEmail(email = "") {
  const [user, domain] = String(email).split("@");
  if (!domain) return email;
  const u = user.length <= 2 ? user[0] + "*" : user[0] + "*".repeat(Math.max(1, user.length - 2)) + user.slice(-1);
  return `${u}@${domain}`;
}
function matchUserBySid(users, sidInput) {
  const sid = normalizeSid(sidInput);
  return users.find((u) => {
    const sidField = normalizeSid(u.sid || "");
    const email = normalizeSid(u.email || "");
    const username = normalizeSid(u.username || "");
    const emailLocal = email.split("@")[0];
    return (
      sidField === sid ||
      email === sid ||
      emailLocal === sid ||
      username === sid
    );
  });
}

// POST /api/auth/identify  { sid }
router.post("/identify", async (req, res) => {
  const { sid } = req.body || {};
  if (!sid) return res.status(400).json({ error: "SID is required." });

  const users = await loadUsers();
  const user = matchUserBySid(users, sid);
  if (!user) return res.status(404).json({ error: "SID not found." });

  return res.json({
    ok: true,
    sid: user.sid || user.username || (user.email ? user.email.split("@")[0] : sid),
    displayName: user.name || user.fullName || null,
    hint: user.email ? maskEmail(user.email) : null,
  });
});

// POST /api/auth/login  { sid, password }
router.post("/login", async (req, res) => {
  const { sid, password } = req.body || {};
  if (!sid || !password) return res.status(400).json({ error: "SID and password are required." });

  const users = await loadUsers();
  const user = matchUserBySid(users, sid);
  if (!user) return res.status(401).json({ error: "Invalid credentials." });

  // Plaintext fallback (you can upgrade to bcrypt later)
  const ok = String(user.password || "") === String(password);
  if (!ok) return res.status(401).json({ error: "Invalid credentials." });

  const payload = {
    sub: user.id || user.sid || user.email || user.username || "user",
    name: user.name || user.fullName || null,
    role: user.role || "User",
  };
  const secret = process.env.JWT_SECRET || "dev-secret-change-me";
  const token = jwt.sign(payload, secret, { expiresIn: "8h" });

  res.json({ token, user: payload });
});

module.exports = router;
