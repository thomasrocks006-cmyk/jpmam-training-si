2) Mandates routes (CRUD + breach patch + fetch-only breaches)
Replace routes/mandates.js with this:
js
Copy code
// routes/mandates.js
import { Router } from "express";
import { requireAuth } from "../lib/auth.js";
import {
  getMandates,
  findMandateById,
  createMandate,
  updateMandate,
  deleteMandate,
  getBreaches,
  getBreachesForMandate,
  updateBreachStatus,
  addBreach
} from "../lib/mandatesStore.js";

const router = Router();

// LIST (lightweight rows)
router.get("/", requireAuth, (_req, res) => {
  res.json(getMandates());
});

// CREATE
router.post("/", requireAuth, (req, res) => {
  try {
    const m = createMandate(req.body || {});
    res.status(201).json(m);
  } catch (e) {
    res.status(400).json({ error: e.message });
  }
});

// DETAIL
router.get("/:id", requireAuth, (req, res) => {
  const m = findMandateById(req.params.id);
  if (!m) return res.status(404).json({ error: "Mandate not found" });
  res.json(m);
});

// UPDATE (full replace/patch hybrid)
router.put("/:id", requireAuth, (req, res) => {
  try {
    const m = updateMandate(req.params.id, req.body || {});
    res.json(m);
  } catch (e) {
    const code = e.message.includes("not found") ? 404 : 400;
    res.status(code).json({ error: e.message });
  }
});

// DELETE (optional)
router.delete("/:id", requireAuth, (req, res) => {
  const ok = deleteMandate(req.params.id);
  if (!ok) return res.status(404).json({ error: "Mandate not found" });
  res.json({ ok: true });
});

// FETCH-ONLY breaches for a mandate (bonus)
router.get("/:id/breaches", requireAuth, (req, res) => {
  try {
    const list = getBreachesForMandate(req.params.id);
    res.json({ breaches: list });
  } catch (e) {
    const code = e.message.includes("not found") ? 404 : 400;
    res.status(code).json({ error: e.message });
  }
});

// Add a breach to a mandate (optional)
router.post("/:id/breaches", requireAuth, (req, res) => {
  try {
    const b = addBreach(req.params.id, req.body || {});
    res.status(201).json(b);
  } catch (e) {
    const code = e.message.includes("not found") ? 404 : 400;
    res.status(code).json({ error: e.message });
  }
});

// PATCH breach (ack/resolve/note)
router.patch("/:id/breaches/:breachId", requireAuth, (req, res) => {
  try {
    const out = updateBreachStatus(req.params.id, req.params.breachId, req.body || {});
    res.json(out);
  } catch (e) {
    const code = e.message.includes("not found") ? 404 : 400;
    res.status(code).json({ error: e.message });
  }
});

// OPEN breaches (already used by dashboard)
router.get("/breaches/open", requireAuth, (_req, res) => {
  res.json(getBreaches({ status: "Open" }));
});

// All breaches (flat list)
router.get("/breaches", requireAuth, (req, res) => {
  const status = req.query.status || null;
  res.json(getBreaches({ status }));
});

export default router;
Note: Keep this /:id/breaches before any generic /:id subpaths that might conflict.

3) Frontend helpers + safer table + “Save Mandate”
Open public/app.js.

3a) API helpers (place with your other helpers)
js
Copy code
// === Mandates API ===
async function mandatesList(){ return await apiGet("/mandates"); }
async function mandateGet(id){ return await apiGet(`/mandates/${encodeURIComponent(id)}`); }
async function mandateCreate(payload){
  return await apiFetch("/mandates", { method: "POST", headers: {"Content-Type":"application/json"}, body: JSON.stringify(payload) });
}
async function mandateUpdate(id, payload){
  return await apiFetch(`/mandates/${encodeURIComponent(id)}`, { method: "PUT", headers: {"Content-Type":"application/json"}, body: JSON.stringify(payload) });
}
async function mandateDelete(id){
  return await apiFetch(`/mandates/${encodeURIComponent(id)}`, { method: "DELETE" });
}
async function mandateBreaches(id){
  return await apiGet(`/mandates/${encodeURIComponent(id)}/breaches`);
}
async function mandatePatchBreach(id, breachId, payload){
  return await apiFetch(`/mandates/${encodeURIComponent(id)}/breaches/${encodeURIComponent(breachId)}`, {
    method: "PATCH", headers: {"Content-Type":"application/json"}, body: JSON.stringify(payload)
  });
}
3b) Safer table renderer for Mandates list
Find where ViewMandates builds the table rows and replace the row builder with this safer version:

js
Copy code
function renderMandatesTable(rows){
  return rows.map(r => {
    const id = r.id || "-";
    const client = r.client || "-";
    const strategy = r.strategy || "-";
    const aum = r.aumAud != null ? fmtAUD(r.aumAud) : "—";
    const status = r.status || "—";
    const updated = r.lastUpdate ? new Date(r.lastUpdate).toLocaleDateString() : "—";
    return `
      <tr>
        <td>${id}</td>
        <td>${client}</td>
        <td>${strategy}</td>
        <td>${aum}</td>
        <td><span class="pill">${status}</span></td>
        <td>${updated}</td>
        <td><button class="btn-ghost" data-open="${id}">Open</button></td>
      </tr>
    `;
  }).join("") || `<tr><td colspan="7" class="muted">No mandates.</td></tr>`;
}
Then in ViewMandates() when you fetch:

js
Copy code
const tableBody = card.querySelector("#mandatesRows"); // whatever your tbody id is
const data = await mandatesList();
tableBody.innerHTML = renderMandatesTable(data);
tableBody.addEventListener("click", (e) => {
  const id = e.target?.dataset?.open;
  if (!id) return;
  state.view = "mandate";
  state.mandateId = id;
  render();
});
(Adjust selectors if your ids differ — the pattern stays the same.)